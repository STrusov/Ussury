/**\file*********************************************************************
 *                                                                     \brief
 *  Произвольные аргументы
 *
 ****************************************************************************
 */

/**\addtogroup C_Library
 *@{*/
/**\addtogroup C_Stdarg
 *
 * Обработка списка безымянных аргументов (...) функции.
 *@{*/

#ifndef __STDC_VERSION_STDARG_H__
#define __STDC_VERSION_STDARG_H__ __STDC_VERSION__
#pragma once


/**
 * Тип объекта, способного хранить требуемое макросам #va_start, #va_arg,
 * #va_end и #va_copy значение.
 */
typedef __builtin_va_list va_list;

/**
 * 7.16.1.1 Макрос va_arg.
 *
 * type va_arg(va_list ap, type);
 *
 * Макрос раскрывается в выражение указанного \c type типа
 * со значением следующего аргумента вызванной функции.
 *
 * Параметр \c ap должен быть инициализирован макросом #va_start или #va_copy.
 *
 * Каждый вызов #va_arg меняет значение \c ap, таким образом получаются
 * следующие в списке аргументы. Первым вызовом получается первый аргумент
 * списка (\c ...) и так далее.
 *
 * TODO описать UB
 */
#define va_arg(ap, type) __builtin_va_arg(ap, type)

/**
 * 7.16.1.2 Макрос va_copy.
 *
 * void va_copy(va_list dest, va_list src);
 *
 * Инициализирует \c dest копией \c src, как если бы \c dest прошёл всю
 * цепочку операций (инициализация с последующим использованием) с \c src.
 *
 * Ни #va_copy, ни #va_start не должны использоваться для повторной инициализации
 * \c dest без предварительного #va_end.
 */
#define va_copy(dest, src) __builtin_va_copy(dest, src)

/**
 * 7.16.1.3 Макрос va_end.
 *
 * void va_end(va_list ap);
 *
 * Обеспечивает корректное завершение функции, аргументы которой получались
 * при помощи макроса #va_start, либо содержащей макрос #va_copy.
 * Значение \c ap может быть изменено и непригодно к дальнейшему использованию.
 *
 * UB: Если \c ap не инициализировано #va_start или #va_copy,
 * или для инициализированного не вызван #va_end, поведение не определено.
 */
#define va_end(ap) __builtin_va_end(ap)

/**
 * 7.16.1.4 Макрос va_start.
 *
 * 1. void va_start(va_list ap, ...);
 *
 * 2. Должен быть вызван перед доступом к безымянным аргументам.
 *
 * 3. Инициализирует \c ap для дальнейшего использования в #va_arg и #va_end.
 * Не должно быть повторных вызовов #va_start или #va_copy с аргументом \c ap
 * без соответствующего #va_end.
 *
 * TODO С23 2-й аргумент определяет как ...
 */
#define va_start(ap, type) __builtin_va_start(ap, type)


#endif//__STDC_VERSION_STDARG_H__

/**@} C_Stdarg */
/**@} C_Library */
