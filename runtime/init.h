/**\file*********************************************************************
 *                                                                     \brief
 *  Инициализация процесса
 *
 ****************************************************************************
 */

/**\addtogroup Runtime
 *@{*/
/**\addtogroup Rtl_init   Инициализация процесса
 *@{*/

#ifndef __STDC_VERSION_RTL_INIT_H__
#define __STDC_VERSION_RTL_INIT_H__ 10 // AMD64 ABI Draft 1.0
#pragma once

#ifdef __linux__

   #include "../Linux/sys/syscall.h"

#endif

/**
 * Подпрограмма _start.
 *
 * Входная точка основного потока исполнения процесса.
 *
 * #  3.4 Инициализация процесса (AMD64 ABI Draft 1.0).
 *
 * ## 3.4.1 Начальное состояние стека и регистров.
 *
 * ### Регистры специального назначения.
 *
 * Для SSE2 и x87 флаги исключений сброшены.
 *
 * <table><caption> Управляющее слово математического сопроцессора (FPCW) </caption>
 *
 * <tr><th> Поле <th> Значение <th> Примечание
 * <tr><td>  RC  <td> 00       <td> Округление к ближайшему (четному)
 * <tr><td>  PC  <td> 11       <td> Расширенная двойная точность (80 разрядов)
 * <tr><td>  PM  <td> 1        <td> Неточный результат игнорируется
 * <tr><td>  UM  <td> 1        <td> Потеря значимости игнорируется
 * <tr><td>  OM  <td> 1        <td> Переполнение игнорируется
 * <tr><td>  ZM  <td> 1        <td> Деление на 0 игнорируется
 * <tr><td>  DM  <td> 1        <td> Денормализованный операнд игнорируется
 * <tr><td>  IM  <td> 1        <td> Неверная операция игнорируется
 * </table>
 *
 * <table><caption>  Регистр управления SSE (MXCSR)   </caption>
 *
 * <tr><th> Поле <th> Значение <th> Примечание
 * <tr><td>  FZ  <td> 00       <td> Не сбрасывать в 0 при потере точности
 * <tr><td>  RC  <td> 00       <td> Округление к ближайшему (четному)
 * <tr><td>  PM  <td> 1        <td> Неточный результат игнорируется
 * <tr><td>  UM  <td> 1        <td> Потеря значимости игнорируется
 * <tr><td>  OM  <td> 1        <td> Переполнение игнорируется
 * <tr><td>  ZM  <td> 1        <td> Деление на 0 игнорируется
 * <tr><td>  DM  <td> 1        <td> Денормализованный операнд игнорируется
 * <tr><td>  IM  <td> 1        <td> Неверная операция игнорируется
 * <tr><td>  DAZ <td> 0        <td> Денормализованные не считать за 0
 * </table>
 *
 * <table><caption>  Фаги процессора RFLAGS  </caption>
 *
 * <tr><th> Поле <th> Значение <th> Примечание
 * <tr><td>  DF  <td> 0        <td> Инкремент индексных регистров
 * <tr><td>  CF  <td> 0        <td> Переноса не было
 * <tr><td>  PF  <td> 0        <td> Нечетное количество 1 в младшем байте (*)
 * <tr><td>  AF  <td> 0        <td> Переноса из 3-го разряда не было
 * <tr><td>  ZF  <td> 0        <td> Результат равен 0
 * <tr><td>  SF  <td> 0        <td> Положительные результат
 * <tr><td>  OF  <td> 0        <td> Переполнения целого со знаком не было
 * </table>
 * \note(*) Здесь в AMD64 ABI ошибочный комментарий.
 * См. `start_thread_common()` в `linux/arch/x86/kernel/process_64.c`.
 * \c flags инициализируется значением `X86_EFLAGS_IF`.
 *
 * ### Состояние стека.
 *
 * <table><caption>  Начальное содержимое стека </caption>
 * <tr><th> Назначение     <th> Начальный адрес <th> Размер
 *
 * <tr><td> Не определено  <td> Старшие ареса        <td>
 * <tr><td> Блок информации (аргументы, переменные окружения) <td> <td> Различная
 * <tr><td> Не определено  <td>                      <td>
 * <tr><td> Нулевой элемент вспомогательного массива <td>   <td> 8 байт
 * <tr><td> Вспомогательный массив <td>                     <td> 8 байт на элемент
 * <tr><td> 0                      <td>                     <td> 8 байт
 * <tr><td> Указатели на переменные окружения <td>          <td> 8 байт каждый
 * <tr><td> 0                      <td>                     <td> 8 байт
 * <tr><td> Указатели на аргументы <td>                     <td> 8 байт каждый
 * <tr><td> Количество аргументов  <td>                     <td> 8 байт
 * <tr><td> Не определено  <td> Младшие ареса         <td>
 * </table>
 *
 * ### Регистры общего назначения.
 *
 * Следующие регистры представляют особое значение при старте:
 *
 * - \c RBP    Значение не определено, коду пользователя рекомендуется
 *             обозначить начальный стековый кадр обнулив указатель на него.
 *
 * - \c RSP    Наименьший адрес начального содержимого стека, то есть \c argc.
 *             Гарантировано выровнен на 16 байт.
 *
 * - \c RDX    Указатель на функцию, следует зарегистрировать в atexit().
 *
 * По конвенции вызова AMD64 ABI регистр rdx является 3-м аргументом.
 */
__attribute__((weak, naked, noreturn))
void _start(long di, long si, long dl_dtor)
{
   __asm__ volatile (
      ".att_syntax         \n"
#if 0//1
      "  int  $0x03        \n"
#endif
      "  xor  %ebp, %ebp   \n"
      "  mov  %rsp, %rdi   \n"
      "  and  $-16, %rsp   \n"
      "  call _init_crt    \n"
      "  hlt               \n"
   );
}

__attribute__((weak))
char **environ;

/**
 * Элемент вспомогательного массива.
 */
typedef struct
{
   int   a_type;
   union {
      long  a_val;
      void *a_ptr;
      void (*a_fnc)();
   } a_un;
} auxv_t;


__attribute__((weak))
void _init_crt(volatile long * sp, long dummy, long dl_dtor)
{
   int argc = *sp;
   char ** argv = ++sp;

   environ = &argv[argc + 1];

   int r = main(argc, argv);
   sys_exit(r);
}


#endif//__STDC_VERSION_RTL_INIT_H__

/**@} Rtl_init */
/**@} Runtime */
